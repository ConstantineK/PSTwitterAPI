# $ApiResources = Get-Content ".\twitter_api.json" | ConvertFrom-Json
# $ValidResources = $ApiResources | Where-Object { $_.ReferenceProperties.ResourceUrl -Match '.json$' }

ForEach ($ApiResource in $ValidResources) {

$Verb = If ($ApiResource.Method -eq 'GET') { 'Get' } Else { 'Send' }
$ResourceName = ((Get-Culture).TextInfo.ToTitleCase(($ApiResource.ReferenceUrl -Split "/")[-1]) -Split "-")[1..999] -Join "-" -Replace "_", "" -Replace "-", "_"
$FunctionName = "${Verb}-Twitter${ResourceName}"

$HelpParameters = @()
$FunctionParameters = @()
ForEach ($Parameter in $ApiResource.ReferenceProperties.Parameters) {
    $HelpParameters += ".PARAMETER $($Parameter.Name)"
    $HelpParameters += "    $($Parameter.Description)`r`n"
    $FunctionParameters += "[string]`$$(($Parameter.Name -Split " ")[0])"
}

@"
function ${FunctionName} {

<#
.SYNOPSIS
    $($ApiResource.ReferenceProperties.fDescription)

.DESCRIPTION
    $($ApiResource.ReferenceProperties.Description -Split "`r`n" -Join "`r`n    ")

$($HelpParameters -Join "`r`n")
.NOTES
    This helper function was generated by the information provided here:
    $($ApiResource.ReferenceUrl)

#>
    [CmdletBinding()]
    Param(
        $($FunctionParameters -Join ",`r`n        ")
    )
    Begin {

        [string]`$Method      = '$($ApiResource.Method)'
        [string]`$Resource    = '$($ApiResource.Resource)'
        [string]`$ResourceUrl = '$($ApiResource.ReferenceProperties.ResourceUrl)'

        [hashtable]`$Parameters = `$PSBoundParameters
                   `$CmdletBindingParameters | % { `$Parameters.Remove(`$_) }

    }
    Process {

        If (-Not `$OAuthSettings) { `$OAuthSettings = Get-TwitterOAuthSettings -Resource `$Resource }
        Invoke-TwitterAPI -Resource `$Resource -Method `$Method -Parameters `$Parameters -OAuthSettings `$OAuthSettings

    }
    End {

    }
}
"@ | Set-Content ".\helper\${FunctionName}.ps1"

}
